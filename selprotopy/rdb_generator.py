"""
RDB Generator using SEL_RDB library
This module creates perfect RDB files that work directly with QuickSet
"""
import sys
import os
import csv
import tempfile
from pathlib import Path

# Add the site-packages directory to the path
site_packages = 'C:/Users/Dell/anaconda3/envs/relife_py311/Lib/site-packages'
if site_packages not in sys.path:
    sys.path.insert(0, site_packages)

# Import SEL_RDB functionality
sys.path.insert(0, os.path.join(site_packages, 'SEL_Rdb'))
import create_rdb_template

class RDBGenerator:
    """Main class for generating RDB files using SEL_RDB library"""
    
    def __init__(self):
        """Initialize the RDB generator"""
        pass
    
    def csv_to_txt_content(self, csv_file_path):
        """
        Convert CSV file to the proper text format expected by SEL_RDB
        
        Args:
            csv_file_path (str): Path to input CSV file
            
        Returns:
            str: Path to temporary text file with proper format
        """
        # Read the CSV file
        with open(csv_file_path, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            row = next(reader)  # Get the first (and typically only) row
        
        # Create the text content in the proper format
        txt_content = """; SEL QuickSet Import Template - generated
; Generated by SELConnect with SEL_RDB integration

[Device]
Model={}
Serial={}

[CT/PT]
CT Primary={} A
CT Secondary={} A
PT Primary={} V
PT Secondary={} V

[Protection]
50P1T Pickup={} A
51P1T Time={} s
51P1T Curve={}
50Q1T Pickup={} A
81D1T UnderFreq={} Hz
27P1T UnderVolt={}

[Comm Port 1]
Baud={}
Protocol={}
""".format(
            row.get('device', ''),
            row.get('serial', ''),
            row.get('ct_primary_A', ''),
            row.get('ct_secondary_A', ''),
            row.get('pt_primary_V', ''),
            row.get('pt_secondary_V', ''),
            row.get('oc_50p1t_pickup_A', ''),
            row.get('oc_51p1t_time_s', ''),
            row.get('oc_51p1t_curve', ''),
            row.get('oc_50q1t_pickup_A', ''),
            row.get('uf_81d1t_freq_Hz', ''),
            row.get('uv_27p1t_pu', ''),
            row.get('comm_port1_baud', ''),
            row.get('comm_port1_protocol', '')
        )
        
        # Write to a temporary file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(txt_content)
            txt_file_path = f.name
        
        return txt_file_path

    def create_perfect_rdb_from_csv(self, csv_file, output_rdb):
        """
        Create a perfect RDB file using the SEL_RDB library from CSV data
        
        Args:
            csv_file (str): Path to input CSV file with relay settings
            output_rdb (str): Path to output RDB file
            
        Returns:
            tuple: (output_path, success, message)
        """
        try:
            # Convert CSV to text format first
            txt_file = self.csv_to_txt_content(csv_file)
            
            # Use SEL_RDB library to create a perfect RDB file from the text file
            create_rdb_template.create_rdb_file(txt_file, output_rdb)
            
            # Clean up temporary file
            os.unlink(txt_file)
            
            return output_rdb, True, "Perfect RDB file created using SEL_RDB library"
        except Exception as e:
            return output_rdb, False, f"Error creating RDB file with SEL_RDB: {str(e)}"

    def create_perfect_rdb_from_dict(self, relay_data, output_rdb):
        """
        Create a perfect RDB file using the SEL_RDB library from a dictionary of relay data
        
        Args:
            relay_data (dict): Dictionary containing relay settings
            output_rdb (str): Path to output RDB file
            
        Returns:
            tuple: (output_path, success, message)
        """
        try:
            # Create a temporary CSV file from the dictionary
            with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, newline='') as f:
                # Write CSV header and data
                fieldnames = list(relay_data.keys())
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerow(relay_data)
                temp_csv_path = f.name
            
            # Convert CSV to text format
            txt_file = self.csv_to_txt_content(temp_csv_path)
            
            # Use SEL_RDB library to create a perfect RDB file
            create_rdb_template.create_rdb_file(txt_file, output_rdb)
            
            # Clean up temporary files
            os.unlink(temp_csv_path)
            os.unlink(txt_file)
            
            return output_rdb, True, "Perfect RDB file created using SEL_RDB library"
        except Exception as e:
            return output_rdb, False, f"Error creating RDB file with SEL_RDB: {str(e)}"

    def batch_create_perfect_rdb_from_master_csv(self, master_csv, output_dir):
        """
        Create perfect RDB files for all relays in a master CSV file
        
        Args:
            master_csv (str): Path to master CSV file with all relay settings
            output_dir (str): Directory to output RDB files
            
        Returns:
            list: List of results for each relay
        """
        results = []
        
        try:
            # Create output directory if it doesn't exist
            os.makedirs(output_dir, exist_ok=True)
            
            # Read the master CSV file
            with open(master_csv, newline='', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for i, row in enumerate(reader):
                    # Create a relay ID if not present
                    relay_id = row.get('relay_id', f'Relay_{i+1}')
                    
                    # Create output directory for this relay
                    relay_dir = os.path.join(output_dir, relay_id)
                    os.makedirs(relay_dir, exist_ok=True)
                    
                    # Create RDB file path
                    rdb_path = os.path.join(relay_dir, f'{relay_id}.rdb')
                    
                    # Create a temporary CSV file for this relay
                    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, newline='') as f:
                        fieldnames = list(row.keys())
                        writer = csv.DictWriter(f, fieldnames=fieldnames)
                        writer.writeheader()
                        writer.writerow(row)
                        temp_csv_path = f.name
                    
                    # Convert CSV to text format
                    txt_file = self.csv_to_txt_content(temp_csv_path)
                    
                    # Create the RDB file using SEL_RDB
                    try:
                        create_rdb_template.create_rdb_file(txt_file, rdb_path)
                        results.append((relay_id, rdb_path, True, "Success"))
                        print(f"[OK] Generated perfect RDB for {relay_id}")
                    except Exception as e:
                        results.append((relay_id, rdb_path, False, f"Error: {str(e)}"))
                        print(f"[ERROR] Failed to generate RDB for {relay_id}: {str(e)}")
                    
                    # Clean up temporary files
                    os.unlink(temp_csv_path)
                    os.unlink(txt_file)
                    
        except Exception as e:
            print(f"[ERROR] Failed to process master CSV: {str(e)}")
            
        return results

# Example usage
if __name__ == "__main__":
    print("RDB Generator using SEL_RDB library")
    print("This module creates perfect RDB files for QuickSet import")